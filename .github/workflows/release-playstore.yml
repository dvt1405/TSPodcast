name: Release to Google Play Console

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production
      releaseNotes:
        description: 'Release notes for this build'
        required: true
        default: 'New release with improvements and bug fixes'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      # Increment version code
      - name: Increment Version Code
        id: increment_version
        run: |
          # Extract current version code from release buildType in build.gradle.kts
          CURRENT_VERSION_CODE=$(grep -o 'release {.*defaultConfig.versionCode = [0-9]*' app/build.gradle.kts -s | grep -o 'defaultConfig.versionCode = [0-9]*' | grep -o '[0-9]*')
          echo "Current version code: $CURRENT_VERSION_CODE"

          # Increment version code
          NEW_VERSION_CODE=$((CURRENT_VERSION_CODE + 1))
          echo "New version code: $NEW_VERSION_CODE"

          # Update version code in build.gradle.kts for release buildType
          sed -i "s/release {.*defaultConfig.versionCode = $CURRENT_VERSION_CODE/release {\n            defaultConfig.versionCode = $NEW_VERSION_CODE/" app/build.gradle.kts

          # Store the new version code for later use
          echo "NEW_VERSION_CODE=$NEW_VERSION_CODE" >> $GITHUB_ENV
          echo "new_version_code=$NEW_VERSION_CODE" >> $GITHUB_OUTPUT

      # Build Android App Bundle
      - name: Build App Bundle
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: ./gradlew generateReleaseBundle

      # Upload AAB as artifact
      - name: Upload AAB as artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-bundle
          path: app/build/outputs/bundle/release/*.aab

      # Decode the service account key JSON file
      - name: Decode Service Account Key
        env:
          PLAY_STORE_SERVICE_ACCOUNT_KEY_BASE64: ${{ secrets.PLAY_STORE_SERVICE_ACCOUNT_KEY_BASE64 }}
        run: |
          echo $PLAY_STORE_SERVICE_ACCOUNT_KEY_BASE64 | base64 --decode > service-account-key.json

      # Deploy to Google Play Console internal testing
      - name: Deploy to Google Play Console
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJson: service-account-key.json
          packageName: tss.t.podcast
          releaseFiles: app/build/outputs/bundle/release/*.aab
          track: internal
          status: completed
          whatsNewDirectory: distribution/whatsnew
          mappingFile: app/build/outputs/mapping/release/mapping.txt

      # Create a release notes file for Google Play
      - name: Create Release Notes
        run: |
          mkdir -p distribution/whatsnew/en-US
          echo "${{ github.event.inputs.releaseNotes }}" > distribution/whatsnew/en-US/whatsnew

      # Commit version code increment back to the repository only if deployment was successful
      # This ensures we only update the version in the repo if the release was actually published
      - name: Commit Version Code Update
        if: success()
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "chore: Increment versionCode to ${{ steps.increment_version.outputs.new_version_code }} [skip ci]"
          file_pattern: app/build.gradle.kts
